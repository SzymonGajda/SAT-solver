#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


/********************   Forward Declarations    ********************/

class Formula;

class FormIff;

class FormImplies;

class FormOr;

class FormAnd;

class FormNot;

class FormVar;

class FormFalse;

class FormTrue;


/********************   Visitor Interfaces    ********************/
class Visitor {
public:
    virtual ~Visitor() {}

    virtual void visitFormula(Formula *p) = 0;

    virtual void visitFormIff(FormIff *p) = 0;

    virtual void visitFormImplies(FormImplies *p) = 0;

    virtual void visitFormOr(FormOr *p) = 0;

    virtual void visitFormAnd(FormAnd *p) = 0;

    virtual void visitFormNot(FormNot *p) = 0;

    virtual void visitFormVar(FormVar *p) = 0;

    virtual void visitFormFalse(FormFalse *p) = 0;

    virtual void visitFormTrue(FormTrue *p) = 0;


    virtual void visitInteger(Integer x) = 0;

    virtual void visitChar(Char x) = 0;

    virtual void visitDouble(Double x) = 0;

    virtual void visitString(String x) = 0;

    virtual void visitIdent(Ident x) = 0;

};


class Visitable {
public:
    virtual ~Visitable() {}

    virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Formula : public Visitable {
public:
    virtual Formula *clone() const = 0;

    virtual String toString() = 0;
};


class FormIff : public Formula {
public:
    Formula *formula_1;
    Formula *formula_2;

    FormIff(const FormIff &);

    FormIff &operator=(const FormIff &);

    FormIff(Formula *p1, Formula *p2);

    ~FormIff();

    virtual void accept(Visitor *v);

    virtual FormIff *clone() const;

    void swap(FormIff &);

    String toString();
};

class FormImplies : public Formula {
public:
    Formula *formula_1;
    Formula *formula_2;

    FormImplies(const FormImplies &);

    FormImplies &operator=(const FormImplies &);

    FormImplies(Formula *p1, Formula *p2);

    ~FormImplies();

    virtual void accept(Visitor *v);

    virtual FormImplies *clone() const;

    void swap(FormImplies &);

    String toString();
};

class FormOr : public Formula {
public:
    Formula *formula_1;
    Formula *formula_2;

    FormOr(const FormOr &);

    FormOr &operator=(const FormOr &);

    FormOr(Formula *p1, Formula *p2);

    ~FormOr();

    virtual void accept(Visitor *v);

    virtual FormOr *clone() const;

    void swap(FormOr &);

    String toString();
};

class FormAnd : public Formula {
public:
    Formula *formula_1;
    Formula *formula_2;

    FormAnd(const FormAnd &);

    FormAnd &operator=(const FormAnd &);

    FormAnd(Formula *p1, Formula *p2);

    ~FormAnd();

    virtual void accept(Visitor *v);

    virtual FormAnd *clone() const;

    void swap(FormAnd &);

    String toString();
};

class FormNot : public Formula {
public:
    Formula *formula_;

    FormNot(const FormNot &);

    FormNot &operator=(const FormNot &);

    FormNot(Formula *p1);

    ~FormNot();

    virtual void accept(Visitor *v);

    virtual FormNot *clone() const;

    void swap(FormNot &);

    String toString();
};

class FormVar : public Formula {
public:
    String string_;

    FormVar(const FormVar &);

    FormVar &operator=(const FormVar &);

    FormVar(String p1);

    ~FormVar();

    virtual void accept(Visitor *v);

    virtual FormVar *clone() const;

    void swap(FormVar &);

    String toString();
};

class FormFalse : public Formula {
public:

    FormFalse(const FormFalse &);

    FormFalse &operator=(const FormFalse &);

    FormFalse();

    ~FormFalse();

    virtual void accept(Visitor *v);

    virtual FormFalse *clone() const;

    void swap(FormFalse &);

    String toString();
};

class FormTrue : public Formula {
public:

    FormTrue(const FormTrue &);

    FormTrue &operator=(const FormTrue &);

    FormTrue();

    ~FormTrue();

    virtual void accept(Visitor *v);

    virtual FormTrue *clone() const;

    void swap(FormTrue &);

    String toString();
};


#endif
